포인터를 컨테이너에 저장하기..

그럼 포인터를 저장하는 이유는 뭘까?

1. 컨테이너에 포인터를 저장한다는 것은 포인터가 가리키는 객체가 아니라 포인터가 복제된다는의미 ** 포인터복제가 객체복제보다 속도가 빠름.
2. 컨테이너 포인터를 저장하면 다형성(상속)을 얻을 수 있다.
3. 정렬시 객체이동보단 포인터이동이 훨씬빠르당~
4. 스마트포인터를 저장하는것이 원시 포인터를 저장하는 것보다 안전하다. 이는 스마트 포인터는 더는 참조하지 않을 때 자유 공간에 있는 객체가 자동으로삭제된다.
이렇게 하면 메모리 누수가 발생할까 걱정 ㄴㄴ, 스마트 포인터가 아무것도 가리키지 않으면 nullptr임.

복제필요 x unique, o라면 shared_ptr

순차열 컨테이너에 포인터 저장하기)
컨테이너 원시포인터를 쓰면 발생하는 문제점 : 즉 포인터만 삭제하고 포인터가 가리키는 값을 삭제안하는 문제.
포인터 원소를 삭제할 때는 자유공간에 있는 메모리를 먼저 해제하구 이를 직접 관리한다.  
자유공간에 있는 메모리를 해제하지 않고 포인터를 삭제하면 메모리를 해제할 수 없게 된다.
이것이 컨테이너에 원시 포인터를 저장했을 때 흔히 발생하는 메모리 누수 유형임
for(auto iter = begin(words), iter!=end(words);)
if(**iter == "data") words.erase(iter); // 메모리  누수
else iter++;
포인터를 삭제하지만 포인터가 가리키는 메모리는 해제하지않아서 메모리 누수발생..

solution))
for(auto iter = begin(words), iter!=end(words);)
if(**iter == "data") 
{	
	delete *iter; // add
	words.erase(iter);	
}

또 벡터를 제거하거려면
for(auto& w : words) delete w; // 모든 객체들을 삭제함.
words.clear( ); // 포인터들 삭제 

but 스마트포인터를 쓴다면?? 자유공간에서 메모리를 해제하는 걸 걱정 ㄴㄴ

추가>>*****

자동공간에 있는 자동변수의 메모리들은 스택에 할당되어 스코프에서 벗어나면 해제되고,
자유공간에 있는 동적 할당된 메모리들은 힙에 할당되어 delete 혹은 free()가 호출되기 전까지는 해제되지 않습니다.

만일, 다음과 같은 코드에서

Copy to clipboard
void some_function()
{
    some_class* some_ptr = new some_class;
}

new some_class에 해당하는 메모리 주소를 가리키는 포인터 some_ptr은 some_function()이 종료될 때 해제되는 자동변수이고, new some_class는 힙에 동적 할당된 메모리이므로
 some_function()이 호출될수록 누수되는 메모리는 늘어난다.

알고리즘을 포인터 범위에 적용하기 
알고리즘은 범위로 지정된 데이터를 처리한다. 포인터를 저장한 컨테이너에 범위를 지정하면 범위에 대한 반복자는 포인터를 가리킨다. 
따라서 알고리즘에서 포인터를 이용할수 있게 함수 객체를 정의해주어야 한다. 
numeric 헤더에 정의된 accumulate 알고리즘은 operator+연산자를 사용하여 범위에있는 원소들의 합을구한다
두번째버전은 4가지 매개변수를 지정하는데 처음 두 매개변수는 시작,끝 반복자이고 나머지 두 매개변수는 초기값, 각 반복에서 원소와 누적 사이에 적용할 이항 연산을 정의한 함수 객체이다.-> 포인터
accumulate(begin,end,string"",[ ](const String& s, const shared_ptr<string>& pw>){return s+*pw+" ";}
remove_if(함수객체);