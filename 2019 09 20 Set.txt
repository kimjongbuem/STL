개별 키를 갖지 않는다는 점을 제외하면 집합컨테이너는 맵 컨테이너 유사하다
집합에는 4가지 템플릿이 있으며 두가지는 less<T> 정렬 , 해시값을 사용해 원소들을 저장한다.
순차집합은 set  비순차집합은 unordered_set
따라서 순차 집합 컨테이너에 저장된 객체는 반드시 비교연산을 지원해야하고 , 비순차 집합에 저장된 객체는 반드시 해시가 가능한 타입이어야한다.

set<T> 컨테이너는 타입 T인 객체들을 저장하며 객체들은 반드시 유일해야 한다. 동등관계 <- multimap 같은 경우 중복객체를 저장할수 있는지에대한 차이만있음
unordered_set<T> 컨테이너는 타입 T인 객체들을 저장하며 객체들은 반드시 유일해야한다, equal_to 객체를 사용해서 상등관계를 비교한다. <-  위의 내용과 동일

순차는 양방향 vs 비순차는 순방향만.

std::set<int,less<int>> numbers{}; // 균형 이진트리로 저장된다.

원소의 추가와 제거

set<string, greater<string>> words ={"one","two","three"};
auto pr1 = words.insert("four"};  // pr1.first는 새원소 가리키고 pr1.second는 true
auto pr2 = words.insert("two"}; // pr.first는 기존원소 가리키며 삽입 불가.  pr2.second = false

auto iter = words.insert(p1.first, "seven") // four를 가리킨 위치 앞에 seven삽입
원소 리스트와 범위 지정하여 삽입이 가능하다.

set내부에서 원소를 생성하는 경우도 2개인데
emplace(data), emplace_hint(iter, data)