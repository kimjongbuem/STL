개별 키를 갖지 않는다는 점을 제외하면 집합컨테이너는 맵 컨테이너 유사하다
집합에는 4가지 템플릿이 있으며 두가지는 less<T> 정렬 , 해시값을 사용해 원소들을 저장한다.
순차집합은 set  비순차집합은 unordered_set
따라서 순차 집합 컨테이너에 저장된 객체는 반드시 비교연산을 지원해야하고 , 비순차 집합에 저장된 객체는 반드시 해시가 가능한 타입이어야한다.
<

set은 원하는 key를 신속하게 찾고, 또 이 key가 정렬되기를 원할 때 사용합니다.(여기서 말하는 key라는 것은 저장할 자료를 말합니다). 
map과 비슷하지만 다른 점은 map은 key와 값이 한 쌍으로 저장하지만 set은 key만 저장합니다. set도 map과 같이 key를 중복으로 저장할 수 없습니다. 
만약 key를 중복으로 사용하고 싶다면 multiset을 사용해야 합니다. 사용방법은 set과 거의 같습니다. set은 map과 같이 이진 탐색 트리 자료구조를 사용합니다.
>
set<T> 컨테이너는 타입 T인 객체들을 저장하며 객체들은 반드시 유일해야 한다. 동등관계 <- multimap 같은 경우 중복객체를 저장할수 있는지에대한 차이만있음
unordered_set<T> 컨테이너는 타입 T인 객체들을 저장하며 객체들은 반드시 유일해야한다, equal_to 객체를 사용해서 상등관계를 비교한다. <-  위의 내용과 동일

순차는 양방향 vs 비순차는 순방향만.

std::set<int,less<int>> numbers{}; // 균형 이진트리로 저장된다.

원소의 추가와 제거

set<string, greater<string>> words ={"one","two","three"};
auto pr1 = words.insert("four"};  // pr1.first는 새원소 가리키고 pr1.second는 true
auto pr2 = words.insert("two"}; // pr.first는 기존원소 가리키며 삽입 불가.  pr2.second = false

auto iter = words.insert(p1.first, "seven") // four를 가리킨 위치 앞에 seven삽입
원소 리스트와 범위 지정하여 삽입이 가능하다.

set내부에서 원소를 생성하는 경우도 2개인데
emplace(data), emplace_hint(iter, data)


Set 반복자>>>.

set<T> 컨테이너의 멤버에 있는 반복자는 양방향 반복자를 반환한다.
이들 반복자 타입은 set<T> 템플릿 안에서 별칭으로 정의 되어 있다.
set<T> :: reverse_iterator, const_iterator, const_reverse_iterator 정도.
해당 set 컨테이너의 함수 멤버가 반환하는 모든 반복자는 const T 원소를 가리킨다. 따라서 iterator 반복자는 const 원소를 가리키며, 다른 반복자도 마찬가지.

왜냐하면 해당 객체들은 객체 자신이 키이고 컨테이너에서 객체의 위치는 키로써 결정된다. 원소 수정시 원소들의 정렬을 무효화하게 되고,
이렇게 되면 이후의 접근 연산을 모두 망친다. 하나이상의 객체를 저장하고 싶을때는 set컨테이너에 스마트포인터(shared_ptr, weak_ptr)을 저장하는 경우가 많다.

그럼 스마트 포인터?

객체를 변경한 결과가 set에 저장된 객체를 가리키는 포인터의 순서를 변경할 가능성이 있다면 포인터를 위한 비교 함수는 해당 객체에 의존하면 안된다.
구체적인 순서는 필요없으니 포인터가 가리키는 객체를 고려하지 않고, 포인터에 적용할수 있는 비교 함수 객체를 사용해야한다.
memory - owner_less<T>
해당 템플릿은 shared_ptr, weak_ptr객체에 대해 보다 작은 비교를 할수 있는 함수 객체 타입을 정의한다. <= owner_before 멤버함수정의 ( 해당 스마트포인터 < 인수 스마트포인터 = true // else false)
template<typename X> bool owner_before(const std::shared_ptr<X>& other) const; 
템플릿 타입 매개변수와 클래스 템플릿 타입의 매개변수는 다르다. 이는 같은 타입 객체를 가리키는 포인터를 비교할 뿐만 아니라 다른 타입 객체를 가리키는 포인터도 비교할수 있다는점.
shared_ptr<t1> 객체는 shared_ptr<t2> or weak_ptr<t2> 객체와 비교할수 있다. 이는 포인터가 가리키는 것이 포인터가 소유는것과 다를수 있음을 의미함.

소유권측면) shared_ptr 객체. 한객체의 소유권을 공유가능하지만, 소유하지 않은 다른 객체를 가리킬수도 있다.
(공유포인터가 소유한 객체를 가리키는것. 즉 공유포인터가 담고있는 주소가 공유 포인터가 소유한객체의 주소가 아닐수도 있다.
*** 302 별칭생성자의 개념과 
set<smarter pointer<T>, owner_less<smartPointer<T>>>
