총정리내용>
24 ~ 343
재복습 외우기, + 까먹은것들..
1강>>

vecIns.insert(begin(vecIns), std::istream_iterator<double>(std::cin), std::istream_iterator<double>()); // ctrl + z  입력할때까지 add
std::accummulate(begin(vecIns),end(vecIns),0.0) / vecIns.size();

이동할당 연산자, 이동생성자는 반드시 noexcept 지정해야함.

map, set  컨테이너에 저장하고싶다? operaotr<를 구현한 클래스여야한다.!!****

반복자 카테고리 info
모든 반복자 타입은 복제 생성자, 복제 할당 연산자, 소멸자를 가져야함, 또한 교환이 가능해야 합니다...
반복자 카테고리는 컨테이너의 종류에 따라 달라짐. 카테고리는 알고리즘이 반복자의 기능을 결정하게 도와준다.
알고리즘은 반복자인수의 카테고리를 두가지 방식으로 이용가능한데, 1번방식은 연산에 필요한 최소 기능 요구 조건 만족 시켰는가? 2번방시은 알고리즘은 1번 만족하에 더 효율적으로 수행하기 위해 확장 기능사용한다.
(단 반복자를 지원하는 컨테이너)

5개의 반복자 카테고리--- iterator 템플릿에 타입인수로 사용된 빈클래스. 즉 반복자 태그 클래스로 확인 가능함.

1) 읽기 반복자 : 객체에 대한 읽기 권한. if iter exist , *iter is exist. 단한번만 읽을 수 있다. // 연산가능 iter1 != iter2, ==  ///<= 새반복자를 사용할 경우가 많다. (input_iterator_tag)

2) 출력 반복자 : 객체에 대한 쓰기 권한. *iter = new_val . 단한번만 대입가능 ++iter, *iter <= 새반복자를 사용할 경우가 많다. (output_iterator_tag)

3) 순방향 반복자 : 입력반복자와 출력 반복자의 기능에 몇번이고 쓸수 있는 기능. 
ex) replace 알고리즘은 범위 검색하여 원소를 대체하는데 이 대체할 반복자가 원소를 덮어쓸때도 재사용이 가능해야한다. (forward_iterator_tag)

4) 양방향 반복자 : 순방향 반복자와 같은 기능에 역방향이동 가능하다. --iter ! (bidrectional_iterator_tag)

5) 랜덤 액세스 반복자 : 양방향 반복자와 같은 기능에 원소들이 마음대로 접근 가능기능. (random_access_iterator_tag)
정수로 인덱스 접근한다거나 , 정수로 증가시켜서 한다거나, 반복자의 인덱스 차이 값 , 비교 가능(여기선 >, <, >= , <=)

스트림 반복자. 
스트림 - 소스 - 타깃간의 데이터를 텍스트 모드로 전송가능! 입력스트림반복자로 접근가능하고 이용가능한 객체라면 알고리즘 적용가능.

표준 반복자들은 iterator 템플릿 타입을 기반 클래스로 갖고 있다.
iterator_istream or ostream_iterator의 경우 해당 operaotr>> ,<< 가 정의되어야 사용가능하다.
std::acuumulate( istream_iterator<double>(std::cin), istream_iterator<double>(), 0.0) ;  이런식임.


반복자 어댑터>
반복자 어댑터는 표준 반복자에 특별한 동작을 제공하는 클래스 템플릿임. ( 반복자 템플릿 파생 )

- 역방향반복자 (reverse_iterator) :
표준 반복자 역방향 (rend가 첫번째 원소에서 하나 더 앞, rbegin이 맨 마지막원소..)

-삽입반복자 (insert_iterator)
범위 안에 있는 원소만 접근할수 있는 표준반복자완 달리 컨테이너의 어느 위치든 새 원소들을 범위 추가가능하다.
단 array 컨테이너와 같이 고정되어 있다면 불가하다.
back_insertIterator는 push_back( ) 멤버 함수로 컨테이너의 끝에 새 원소를 추가한다. ( vector, list, deque)  
front_insertIterator는 push_front( ) 멤버 함수로 컨테이너의 아펭 새 원소를 추가한다. (list, forward_list, deque ) 
insert_iterator = > insert 멤버가 있는 ㅋㄴ테이너에 새원소를 삽입한다. 

- 이동반복자 : 복제가 아닌 이동, make_move_iterator : begin, end => move_iterator

반복자에 쓰이는 연산
iteraotr 헤더에는 반복자에 쓰이는 연산을 정의한 4가지 함수 템플릿:

1 . advance : 첫번째 인수로 받은 반복자를 두번째 인수로 지정한 숫자만큼 증가 시킨다(입력반복자기능)
2. distance : 두 반복자가 지정한 범위에 있는 원소들의 개수를 반환한다. ( distance(begin, end) ) 
3. next : 첫번 째 인수로 받은 반복자를 두번째 인수로 지정한 숫자만큼 증가시킨 반복자를 반환한다!!
4. prev : 얘는 감소시킨 반복자 반환. 


스마트포인터
스마트포인터는 자유공간에 할당된 메모리의 주소만을 저장하는데 , new, delete 얘기 <= 언제 delete써야하는지 ... 자동적으로 해제되니 엉청난 강점.

1) unique_ptr<T>  : T에 대한 포인터 처럼 행동하며 유일해야한다. 같은 주소를 소유할수 없다. 독점적이다. 복제가 아닌 이동을 해야하는데 이 때 std::move 함수를 사용해서 이동가능하다.
생성함수 : make_unique_ptr<T>( ) ; . 역참조또한 가능하다. . std::make_unique_ptr<string>(6,'*');  
reset 메서드 : 해당 객체의 주소 메모리를 nullptr 해제한다. 다만 인수를 넣으면 기존의 메모리를 버리고 인수를 메모리에 할당한다.
release 메서드 : 해당 스마트포인터 객체가 가리키는 객체를 해제한다. <= 원본 객의 메모리를 해제하지 않아도 해당 스마트 포인터의 원시 포인터를 nullptr 설정가능하다 ( 차이점 : 반환 )
auto name = unique_ptr<string>("names"); unique_ptr<string> new_name = name.release( ) ; // 해당 new -> new_name 객체 포인터 이동.
swap 메서드 : uni1.swap(uni2);  



2) shared_ptr<T> T에 대한 포인터처럼 행동하지만 공유한다는점이 unique_ptr과의 차이점이다. <= 소유권공유 reference_count object c 방식 인용. 만약 레퍼런스 카운트 0일때 메모리 해제됨.
스마트 포인터는 두가지 할당을 하는데, 하나는 변수를 위한 힙 메모리를 할당, 다른 하나는 스마트 포인터의 복제본 개수를 기록하는데 사용하는 컨트롤 블록을 위해 스마트 포인터 객체와 관련된 힙 메모리 할당.
make_shared_ptr<T> ( ) ;
어려운 내용 : 공유포인터가 배열을 가리키게 할수 있긴한데 이렇게 ㅎ려면 스마트 포인터가 배열을 위한 힙 메모리를 해제하기 위한 DELETEER 메서드를 구현 해야한다.
reset, release, swap... 
비교는 상등관계 ( p1==p2 ) , sp.unique() ==> true/false 한개만 있냐?


3) weak_ptr<T> shared_ptr<T> 오브젝트에서 생성해서 연결하고같은 주소를 가리킨다. 다만 STRONG COUNT는 증가되지않고 WEAK_COUNT만 증가되는데 이는 객체 공유를 하나, 순환참조를 막는 방식으로 이용한다.

expired 메서드는 해당 객체가 없으면 true 아니면 false;    lock 메서드는 함수 객체가 있으면 새로운 shared_ptr 객체를 반환하면서 객체를 잠그고 초기화 => 없으면 nullptr


Algorithm : 
알고리즘은 반복자 쌍으로 지정한 객체의 범위에 적용 할수 있는 계산 함수 , 알고리즘 함수 되어 있다.
1. 변경불가 순차열 연산 : 대상 순차열의 내용을 변경 못함. product, find ,accumulate, count, mismatch, search, equal ..
2. 변경가능 순차열 연산 : swap, copy, transfrom, replace, remove, reverse, rotate, fll, shuffle ... <= 힙연산
3. 정렬 , 병합 : sort, stable_sort, binary_search, merge, min , max;

함수를 인수로 전달하기...

함수객체 , 람다.

람다 ) change(iter, end, [](int v){return v * v;});
표준라이브러리 : funtional.h => std::funtion<> => std::function<double(double)> op = [](int v){return v * v;}; 
해당 function 템플릿으로 가능한 타입 지정 가능하다.
[ 캡처목록 ] ( 매개변수 목록 ) mutable -> 반환타입 { 본문 };

캡처목록 : 람다 표현시그이 바깥범위에서 캡처할 변수 목록. 변수는 값이나 참조로 캡처가능
mutable : 값으로 캡처한 바깥 변수의 복제본을 수정 가능으로 표시하는 키워드로 생략
반환타입또한 생략가능하고 만약 본문에서 반환하지 않으면 void 반환하면 해당 반환하는 자료형 명시적. 여기서 mutable을 쓰면 외부 값을 바꿀수 있다.
[=] : 모든 자동 변수를 값으로 캡처해서 접근가능 but 값 못바꿈. <=> [&] 모든 자동 변수를 참조로 캡처하여 접근한다. 값 바꿀수 있다.
[ = , &factor ] , [&, factor] : 1번은 모든 자동변수 값 factor만 참조 vs 2번은 모든 자동변수 참조 , factor만 값

transform 알고리즘은 처리할 입력데이터를 넣고 스트림에 넣는데 출력스트림에 넣는다면 :: transform. (iter,end ostream_iterator<>(), Function<> )




2강 컨테이너

2.1) 순차 컨테이너 : 원소들을 선형적인 순차열로 저장함 < = 노정렬
array : 원소고정 ,  vector : 뒤에서 붙이고 삭제가능,  deque: 양쪽 끝에서 삽입. 삭제 가능,  list: 모든위치에 삽입가능하며 양방향이지만 한쪽방향 선택해야함, forward_list: 모든 위치 삽입가능 . 순방향

array<T, N> 
fill 메서드를 이용하여 arrayObj.fill(value); 모든 원소 특정 value값 설정가능
접근은 [index] , at(index) => std::out_of_range
fornt, back , data: &front , get<n>( ) 헬퍼함수 템플릿은 런타임 검사 없이 인덱스 값으로 원소에 접근가능함.
begin , end메서드로 반복자 접근이 가능하고 해당 array<T, N>::iterator가 실제타입이다.
array 컨테이너 연속값으로 초기화 하고싶다 : iota(begin, end, 10.0) 10 ~ 끝까지 + 1씩 증가. <= operator++지원
해당 array 객체가 == true가 될라면 모든 객체가 같아야하며 대입시 타입과 개수가 같다면 복제가 가능하다.


vector<T>
array와 비슷하지만 크기가 자동적으로 커진다는 차이점. : 유연성
reserve(capacity int) 해당 용량을 설정.
vector<double> values{20} 원소 한개 값 20 // / / vector<double> values(20) : 크기는 double값 20개 원소 20 ////     vector<double> values(20,99) 20개원소 전부 99초기화
또한 다른벡터의 반복자를 이용해 초기화 가능.  ==> move_iterator(begin(vectorobj)) 해당 벡터 객체의 첫 시작이 이동반복자 

벡터의 용량과 크기 
size : 실제 원소 개수 , capacity : 저장할수 있는 최대 용량 크기 resize를 통해 size 변경, capacity 변경 , data 메서드는 포인터
원소 추가시 push_back, insertm emplace, emplace_back
원소접근 : front, back, array 

반복자 사용하기 :
back_insert_iterator : push_back => copy알고리즘은 처음 두반복자로 원소들의 범위를 정하고 , 세 번째 인수에 지정된 위치로 복제한다.
ex ) copy(istream_iterator<double>(cin), istream_iterator<double>(), back_inserter(data)) \n copy(begin, end, ostream_iterator(cout, " ");

원소 추가하기 :
push_back, emplace_back

원소 삽입: ,, emplace , insert
iter = insert ( iter, data) 
insert( 넣고자하는 위치, 넣을 데이터 시작, 넣을 데이터 끝)
insert(넣고자하는 위치 ,반복 횟수, 넣을 데이터);
insert(넣고자하는 위치,초기화 리스트)
find 알고리즘은 범위 지정에 사용할 수 있는 타입의 반복자를 반환한다 auto iter = find(begin ,end ,data); => 발견못하면 end(vectorobj) iter.base : 가리키는 원소 뒤 위치 .
역방향의 경우 뒤로 삽입이됨

원소삭제하기 :
clear, pop_back,  컨테이너에 할당된 용량이 클 필요가 없다면 즉 원소를 추가하지 않을것이라면 shrink_to_fit멤버를 호출해서 용량을 줄일 수 있다.
auto iter = data.erase(iter) 해당 반복자 위치의 원소를 삭제하고 삭제된 원소뒤의 다음 원소를 가리킨다.
remove 알고리즘은 범위에서 지정한 값과 일치하는 원소들을 제거한다.
auto iter = remove(begin ,end , data); 해당 data와 일치하는 모든 원소를 지정된 범위 하에 모두 제거한다.
그런데 remove는 전역메서드라서 컨테이너의 원소를 삭제할수 없으니.. 복제하는 방법을 통해 제거한다.
즉 새로운 컨테이너에 words = { data ~~~~ auto iter = remove(begin ,end , data));
vector.erase(iter , end(words); 해당 반복자들을 제거... erase - remove 이디엄 ****
words.erase(remove(begin, end, data), end(words));

deque<T>는 헤더에 정의된 컨테이너 템플릿 ---
순차열의 시작이나 끝에 객체들을 효율적으로 추가 삭제가 용이하다. capacity == size가 같다.
접근방식은 at 메서드를 써도 된다.
원소를 추가 삭제시 양쪽끝에서 추가 삭제이기에 pop_front, back // push_front, push_back
컨테이너 내용을 대체하기...
deque.assign( list ); assign : initializer_list<T> 타입을 인수로 기대하므로 컴파일러는 리터럴을 통해 초기화 리스트를 해당 타입으로 생성해 처리함.


list<T>
이중 연결리스트를 구현.
순차열의 어느 위치라도 상수 시간에 원소 삽입과 삭제한다는 장점.
prev ptr , next ptr T obj 를 가짐.
함수도 대부분 비슷하다 : push_front, back ,emplace_back ,front ...., insert(iter, data);
삭제 메서드 : remove, remove if([ ](int ){  } ); 해당 변수 삭제.. unique( ) 중복된 원소를 1개빼고 다 삭제함.
원소 정렬 / 병합:
list.sort(sort class, lambda)
list.merge(list...) 단 정렬이 되어 있어야함. <- operator<
splice(해당 컨테이너에 붙일 위치, 떼어낼 컨테이너 이름, 뗄 리스트 );

forward_list<T>
단일연결리스트로 객체 저장.
1. 역방향 반복자 사용불가 2. 순방향만 const , non-const도 .. 3. 감소연산불가.		4. back x 오직 front만... <- splice_after, insert_after
	











