priority_queue<T>
원소들을 정렬된 순서로 담아두는 큐를 정의한다. 즉, 우선순위가 가장 높은 원소가 큐 맨 앞임.
세가지 매개변수가 있는데 2개는 기본 인수(지정할 객체의 타입, 원소를 저장할때 사용할 기반 컨테이너 = VECTOR) 세번째는 원소의 순서를 결정하는 조건자를 정의한 함수 객체 타입이다.

초기화 복제 : 타입만 결정해줘도 상관 x
원소를 반대로 정렬하고싶을 때 : 모든 타입인수를 지정해 주어야함
string words = {"one","two","three","four"};
priority_queue<string, vector<string>,greater<string>> greater_words {begin(word), end(word)};

우선순위 큐는 front, push_back, pop_back, size, empty 함수 멤버를 지원하는 컨테이너를 사용가능하니 디큐도 ok!

벡터 컨테이너 -> 우선순위 큐

vector<int> values={1,2,3,4,5,6};
priority_queue<int> numbers {less<int>() values}; // 내림차순으로 벡터들의 값을 우선순위 큐로 이동 6 5 4 3 2 1

연산의 범위는 제한이 되어있음.
push, emplace, top,pop, size, empty, swap

우선순위큐는 반복자가없어서 조회시 해당 큐를 복제해서 써야한다(없어지므로)

그래서 일반함수의 매개변수 복사를 통해서 하는편,(큐의 복제)...

-------------------------------------------------------------------------------------------------------------------------------------------------------------
복습>>
getline(cin, 입력데이터, '\n') // 엔터키로 라인넘김가능.

transform(begin(fibonaciArray), end(fibonaciArray), ostream_iterator<int>(std::cout, " "), [&](int val) {
		if (curIndex == 0) { fibonaciArray[curIndex] = 0; curIndex++;  return 0; }
		else if (curIndex == 1) { fibonaciArray[curIndex] = 1; curIndex++; return 1; }
		else {
			fibonaciArray[curIndex] = fibonaciArray[curIndex - 1]+ fibonaciArray[curIndex - 2];
			return fibonaciArray[curIndex++];
		}
	});
transform : 
ostream " "로 각원소들을 출력하며 람다표현식을 통해 [ ](매개변수){ } 함수지정(객체)
copy(citys.begin(), citys.end(), front_inserter(deques)); // copy를 통한 데이터 복사 front_inserter은 앞에서부터 복사한다는 의미다.
