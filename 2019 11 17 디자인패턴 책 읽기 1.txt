솔리드 디자인 원칙
Solid
단일 책임 원칙(S) - Single Resposibility Principle
객체는 복합적으로 책임을 지는것이 아닌 단일적으로 책임을 지어야한다. (메모장의 경우 쓰는 것만 쓰는 객체 그리고 저장만 하는 객체를 따로 두자)

열림 닫힘 원칙(O) Open-Closed Principle
하나의 인터페이스를 두고 그 인터페이스를 상속받게 하여 추가 될때만 열리고 나머지는 닫혀 진다는 원칙 (명세와 필터)

리스코프 치환 원칙(L) Liskov Substitution Princilple
어떤 자식 객체에 접근할 때 그 부모 객체의 인터페이스로 접근 하더라도 아무러 문제가 없어야한다.

인터페이스 분리 원칙(I) Interface Segregation Principle
구현시 대상 선별을 위해 인터페이스를 별개로 두어야한다. (프린트와 스캔)

의존성 역전 원칙(Dependcy Inversuin Principle ,DIP)
자신보다 변하기 쉬운 것에 의존하던 것을 추상화 된 인터페이스나 상위클래스를 두어 변하기 쉬운것에 영향을 받지 않게 하는것 
ex) 스노우 타이어를 의존하던 자동차를 타이어라는 인터페이스를 두어 그밑에 구현하는 스노우, 서머, 기본 등으로 나누어 자동차가 영향을 받지않게 하는것,