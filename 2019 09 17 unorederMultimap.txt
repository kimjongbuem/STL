unordered_multimap
중복 키를 허용하는 비순차맵이다. 즉 unordered_map과 유사하고 변경되는 부분만 약간 다르다.
대부분의 내용은 unorderedmap과 같고
원소를 접근 하는 방법 : find, equal_range(key) // 시작반복자와 끝 반복자로 된 pair를 반환

예제
#include<string>
#include<iostream>
#include<unordered_map>

using namespace std;
int main() {
	std::unordered_multimap<string, size_t> people = { {"jim",33},{"joe",64} };
	unordered_map<string, size_t>::iterator iter = people.emplace("jan", 45);
	people.insert({ "jan",76 });
	people.emplace_hint(iter, "jan",56 );
	string key = "jan";
	auto n = people.count(key);
		cout << "first value : " << people.find(key)->first<< key << " is " << people.find(key)->second << endl;
	if (n > 1) {
		auto pr = people.equal_range(key);
		while (pr.first != pr.second) {
			cout << key << " is " << pr.first->second << endl;
			++pr.first;
		}
	}
	system("pause");
}

//

template<typename Container>
auto find_elements(const Container& container)->pair<typename Container::const_iterator, typename Container::const_iterator> {
	typename Container::key_type key{};
	cin >> key;
	auto pr = container.equal_range(key);
	return pr;
}
/*
	c++ 11 
	반환타입은 컨테이너 타입에 종속적인 pair<>템플릿타입으로 선언한다.
	pair객체로 캡슐화된 반복자의 타입이 컨테이너 타입에 묶이기 때문이다.(컴파일러가 반환 타입 지정 처리 불가함)
	후행반환타입
	그래서 미리 지정해주는데 14부터는 함수의 반환 타입 추론기능이 도입이 되어서 타입지정을 안해도된다.
*/
